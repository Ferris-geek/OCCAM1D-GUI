# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'occam1dmtpy.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import *
import os
import mtpy.modeling.occam1d as mtoc1d
import os.path as op
import time

class Ui_OCCAM1DMTpy(QWidget):
    def __init__(self):
        super().__init__()
        # window.
        self.setObjectName("window")
        self.resize(404, 617)
        
        # title.
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(90, 30, 241, 81))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        
        # input edi file.
        self.input_label = QtWidgets.QLabel(self)
        self.input_label.setGeometry(QtCore.QRect(50, 130, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.input_label.setFont(font)
        self.input_label.setObjectName("input_label")
        
        self.input_textEdit = QtWidgets.QTextEdit(self)
        self.input_textEdit.setGeometry(QtCore.QRect(110, 130, 221, 31))
        self.input_textEdit.setObjectName("input_textEdit")
            
        self.input_Button = QtWidgets.QToolButton(self)
        self.input_Button.setGeometry(QtCore.QRect(340, 130, 21, 31))
        self.input_Button.setObjectName("input_Button")
        
        # Layer setting.
        self.layer_label = QtWidgets.QLabel(self)
        self.layer_label.setGeometry(QtCore.QRect(20, 180, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.layer_label.setFont(font)
        self.layer_label.setObjectName("layer_label")
        
        self.nlayer_SpinBox = QtWidgets.QSpinBox(self)
        self.nlayer_SpinBox.setGeometry(QtCore.QRect(110, 180, 241, 31))
        self.nlayer_SpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.nlayer_SpinBox.setMaximum(1000)
        self.nlayer_SpinBox.setProperty("value", 20)
        self.nlayer_SpinBox.setObjectName("nlayer_SpinBox")
        
        # Max iterations.
        self.maxit_label = QtWidgets.QLabel(self)
        self.maxit_label.setGeometry(QtCore.QRect(10, 230, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.maxit_label.setFont(font)
        self.maxit_label.setObjectName("maxit_label")
        
        self.maxit_SpinBox = QtWidgets.QSpinBox(self)
        self.maxit_SpinBox.setGeometry(QtCore.QRect(110, 230, 241, 31))
        self.maxit_SpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.maxit_SpinBox.setMaximum(1000)
        self.maxit_SpinBox.setProperty("value", 10)
        self.maxit_SpinBox.setObjectName("maxit_SpinBox")
        
        # Mode.
        self.mode_label = QtWidgets.QLabel(self)
        self.mode_label.setGeometry(QtCore.QRect(50, 330, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.mode_label.setFont(font)
        self.mode_label.setObjectName("mode_label")
        
        self.mode_box = QtWidgets.QComboBox(self)
        self.mode_box.setEnabled(True)
        self.mode_box.setGeometry(QtCore.QRect(110, 325, 231, 41))
        self.mode_box.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.mode_box.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.mode_box.setEditable(False)
        self.mode_box.setObjectName("mode_box")
        self.mode_box.addItem("")
        #self.mode_box.addItem("")
        #self.mode_box.addItem("")
        
        # rms.
        self.rms_label = QtWidgets.QLabel(self)
        self.rms_label.setGeometry(QtCore.QRect(20, 280, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.rms_label.setFont(font)
        self.rms_label.setObjectName("rms_label")
        
        self.rms_SpinBox = QtWidgets.QDoubleSpinBox(self)
        self.rms_SpinBox.setGeometry(QtCore.QRect(110, 280, 241, 31))
        self.rms_SpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.rms_SpinBox.setSingleStep(0.1)
        self.rms_SpinBox.setProperty("value", 1.2)
        self.rms_SpinBox.setObjectName("rms_SpinBox")
        
        # plot depth.
        self.depth_label = QtWidgets.QLabel(self)
        self.depth_label.setGeometry(QtCore.QRect(20, 380, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.depth_label.setFont(font)
        self.depth_label.setObjectName("depth_label")
        
        self.depth_SpinBox = QtWidgets.QDoubleSpinBox(self)
        self.depth_SpinBox.setGeometry(QtCore.QRect(110, 380, 241, 31))
        self.depth_SpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.depth_SpinBox.setDecimals(2)
        self.depth_SpinBox.setMaximum(200.0)
        self.depth_SpinBox.setSingleStep(0.1)
        self.depth_SpinBox.setProperty("value", 20.0)
        self.depth_SpinBox.setObjectName("depth_SpinBox")
        
        # plot type
        self.plottype_label = QtWidgets.QLabel(self)
        self.plottype_label.setGeometry(QtCore.QRect(30, 430, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.plottype_label.setFont(font)
        self.plottype_label.setObjectName("plottype_label")
        
        self.type_box = QtWidgets.QComboBox(self)
        self.type_box.setGeometry(QtCore.QRect(110, 430, 231, 31))
        self.type_box.setEditable(False)
        self.type_box.setObjectName("type_box")
        self.type_box.addItem("")
        
        # Output Path.
        self.label_output = QtWidgets.QLabel(self)
        self.label_output.setGeometry(QtCore.QRect(20, 480, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_output.setFont(font)
        self.label_output.setObjectName("label_output")
        
        self.output_textEdit = QtWidgets.QTextEdit(self)
        self.output_textEdit.setGeometry(QtCore.QRect(110, 480, 221, 31))
        self.output_textEdit.setObjectName("output_textEdit")
        
        self.output_Button = QtWidgets.QToolButton(self)
        self.output_Button.setGeometry(QtCore.QRect(340, 480, 21, 31))
        self.output_Button.setObjectName("output_Button")
        
        # progress bar.
        self.progressBar = QtWidgets.QProgressBar(self)
        self.progressBar.setGeometry(QtCore.QRect(50, 520, 301, 21))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")

        # apply and reset box.
        self.buttonBox = QtWidgets.QDialogButtonBox(self)
        self.buttonBox.setGeometry(QtCore.QRect(120, 550, 164, 32))
        self.buttonBox.setStandardButtons(
            QtWidgets.QDialogButtonBox.Apply|
            QtWidgets.QDialogButtonBox.Reset
            )
        self.buttonBox.setObjectName("buttonBox")
        
        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
        
        # init
        os.chdir(os.path.split(os.path.abspath(sys.argv[0]))[0])
        self.parainit()
        
        # Button
        self.input_Button.clicked.connect(self.open_file)
        self.output_Button.clicked.connect(self.output_file)
        self.buttonBox.button(self.buttonBox.Apply).clicked.connect(self.Apply)
        self.buttonBox.button(self.buttonBox.Reset).clicked.connect(self.Reset)
        
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MTpy", "MTpy OCCAM1D"))
        self.label.setText(_translate("MTpy", "MTpy Occam1D Inversion"))
        self.input_label.setText(_translate("MTpy", "edi file"))
        self.layer_label.setText(_translate("MTpy", "Layer nums"))
        self.maxit_label.setText(_translate("MTpy", "Max iterations"))
        self.mode_label.setText(_translate("MTpy", "Mode"))
        self.rms_label.setText(_translate("MTpy", "Target_rms"))
        self.depth_label.setText(_translate("MTpy", "Depth(km)"))
        self.input_Button.setText(_translate("MTpy", "..."))
        self.type_box.setCurrentText(_translate("MTpy", "Matplotlib"))
        self.type_box.setItemText(0, _translate("MTpy", "Matplotlib"))
        self.plottype_label.setText(_translate("MTpy", "Plot Type"))
        self.output_Button.setText(_translate("MTpy", "..."))
        self.label_output.setText(_translate("MTpy", "Save Path"))
        self.mode_box.setCurrentText(_translate("MTpy", "det"))
        self.mode_box.setItemText(0, _translate("MTpy", "det"))
        #self.mode_box.setItemText(1, _translate("MTpy", "tm"))
        #self.mode_box.setItemText(2, _translate("MTpy", "te"))
        
    def parainit(self):
        # Initialize all the parametres.
        self.fileName = ""
        self.nlayers = 20
        self.maxit = 10
        self.rms = 1.0
        self.mode = 'det'
        self.plottype = "matplotlib"
        self.outpath = './result/'
        self.depth = 20
        self.input_textEdit.setText("")
        self.nlayer_SpinBox.setProperty("value", 20)
        self.maxit_SpinBox.setProperty("value", 10)
        self.rms_SpinBox.setProperty("value", 1.0)
        self.mode_box.setCurrentText('det')
        self.depth_SpinBox.setProperty("value", 20)
        self.progressBar.reset()
        self.output_textEdit.setText("")
    
    def paraget(self):
        # get parameters.
        self.nlayers = self.nlayer_SpinBox.text()
        self.maxit = self.maxit_SpinBox.text()
        self.mode = self.mode_box.currentText()
        self.targetrms = self.rms_SpinBox.text()
        self.depth = self.depth_SpinBox.text()  
    
    def open_file(self):
        self.progressBar.reset()
        self.fileName,fileType = QtWidgets.QFileDialog.getOpenFileNames(
            self, "选取文件", os.getcwd(), "EDI Files(*.edi);;All Files(*)"
            )
        
        # Only support *.edi.
        if fileType != "EDI Files(*.edi)":
            QMessageBox.information(
                self, "提醒", "暂不支持除EDI之外的文件\n请重新选择!", 
                QMessageBox.Yes, QMessageBox.Yes
                )
            return 0
        
        if type(self.fileName) == list:
            QMessageBox.information(
                self, "提醒", "导入%d个文件成功!"%len(self.fileName), 
                QMessageBox.Yes, QMessageBox.Yes
                )
            self.input_textEdit.setText(self.fileName[0])
            return 1
    
    def output_file(self):
        # Choose Outputfile.
        self.outpath = QtWidgets.QFileDialog.getExistingDirectory(None, "选取文件夹", "C:/")
        self.output_textEdit.setText(self.outpath)
        print(self.outpath)
        return
      
    def Apply(self):
        # Process data.
        if self.fileName == "":
            QMessageBox.information(
                self, "提醒", "请先读入文件哦!", 
                QMessageBox.Yes, QMessageBox.Yes
                )
        else:
            global resultdir
            resultdir = time.strftime('%Y-%m-%d-%H-%M-%S', time.localtime(time.time()))
            os.system('mkdir ./result/%s'%resultdir)
            self.paraget()
            count = 0
            filenums = len(self.fileName)
            for file in self.fileName:
                occresult = occam1dMTpy(
                    file, nlayers = self.nlayers, 
                    maxit = self.maxit, mode = self.mode,
                    rms = self.targetrms, depth = self.depth
                    )
                count += 1
                self.progressBar.setValue(int(count / filenums * 100))
            
            QMessageBox.information(
                self, "提醒", "成功完成任务!", 
                QMessageBox.Yes, QMessageBox.Yes
                )
            os.system('mv ./result/%s %s'%(resultdir, self.outpath))
            return
        
    def Reset(self):
        self.parainit()

def occam1dMTpy(file,
                nlayers = 20, maxit = 10, mode = 'det',
                rms = 1.0, depth = 50
                ):
    occam1dpre(file, mode, nlayers, maxit, rms)
    occam1dprocess()
    occam1dplot(depth, maxit, file)
    return

def occam1dpre(file, mode, nlayers, maxit, rms):
    # full path to edi file and save path
    edi_file = file
    savepath = r'./mtpytmp'
    
    # make the save path if it doesn't exist
    if not os.path.exists(savepath):
        os.mkdir(savepath)
    else:
        os.system('rm -r %s'%savepath)
        
    # create data file
    ocd = mtoc1d.Data() #create an object and assign values to arguments
    ocd.write_data_file(edi_file=edi_file,
        mode=mode, # 'te', 'tm', or 'det'
        save_path=savepath, # path to save to
        res_errorfloor=4, # error floor in percentage
        phase_errorfloor=2, # error floor in degrees
        remove_outofquadrant=True)
    
    # create model file
    ocm = mtoc1d.Model(n_layers = int(nlayers), # number of layers
        target_depth = 40000,# target depth in metres,
        # before padding
        bottom_layer = 100000, # total depth of model
        z1_layer=10 # first layer thickness in metres
    )
    ocm.write_model_file(save_path=savepath)
    
    # create startup file
    ocs = mtoc1d.Startup(data_fn=ocd.data_fn, # basename of data file
        model_fn=ocm.model_fn, # basename for model file
        max_iter=int(maxit), # maximum number of iterations to run
        target_rms=float(rms)
    )
    ocs.write_startup_file()
    return

def occam1dprocess():
    os.system('cp ./lib/OCCAM1DCSEM ./mtpytmp')
    os.system('cp ./lib/DIPOLE1D ./mtpytmp')
    os.system('cp ./lib/mexDipole1D.mexmaci64 ./mtpytmp')
    os.chdir('./mtpytmp')
    os.system('./OCCAM1DCSEM ./OccamStartup1D')
    os.chdir('..')
    return

def occam1dplot(depth, maxit, file):
    print(os.getcwd())
    wd = r'.'
    # model and data file names
    modelfn=op.join(wd,'mtpytmp/Model1D')
    datafn=op.join(wd,'mtpytmp/Occam1d_DataFile_DET.dat')
    iterfn = op.join(wd,'mtpytmp/ITER_%s.iter'%maxit)
    respfn = op.join(wd,'mtpytmp/ITER_%s.resp'%maxit)

    # read in the model, don't need these lines to view the model
    # but useful if you want to analyse the data
    oc1m = mtoc1d.Model(model_fn=modelfn)
    oc1m.read_iter_file(iterfn)

    # read in the data file
    oc1d = mtoc1d.Data(data_fn=datafn)
    oc1d.read_data_file(data_fn=datafn)
    oc1d.read_resp_file(resp_fn=respfn,data_fn=datafn)

    # plot the model and response
    pr = mtoc1d.Plot1DResponse(data_te_fn = datafn,
    model_fn = modelfn,
    resp_te_fn = respfn,
    iter_te_fn = iterfn,
    depth_limits = (0,float(depth)) )
    
    pathandname = os.path.split(file)
    edifile = pathandname[1]
    sitename = edifile.replace('.edi','')
    os.system('mkdir ./result/%s/%s'%(resultdir, sitename))
    pr.save_figure('./result/%s/%s'%(resultdir, sitename))
    return

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    uimainwindow = Ui_OCCAM1DMTpy()
    uimainwindow.show()
    sys.exit(app.exec_())