# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'occam1d.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import *
import os
import time

class Ui_OCCAM1D(QWidget):
    def __init__(self):
        # UI interface.
        super().__init__()
        self.setObjectName("Occam1d Inversion")
        self.resize(404, 617)
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(120, 30, 171, 81))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        
        # Input edifile.
        self.edifile_label = QtWidgets.QLabel(self)
        self.edifile_label.setGeometry(QtCore.QRect(50, 130, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.edifile_label.setFont(font)
        self.edifile_label.setObjectName("edifile_label")
        
        self.textEdit_input = QtWidgets.QTextEdit(self)
        self.textEdit_input.setGeometry(QtCore.QRect(110, 130, 221, 31))
        self.textEdit_input.setObjectName("textEdit_input")
        
        self.inputButton = QtWidgets.QToolButton(self)
        self.inputButton.setGeometry(QtCore.QRect(340, 130, 21, 31))
        self.inputButton.setObjectName("inputButton")
        
        # nlayer setting.
        self.nlayer_label = QtWidgets.QLabel(self)
        self.nlayer_label.setGeometry(QtCore.QRect(20, 180, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.nlayer_label.setFont(font)
        self.nlayer_label.setObjectName("nlayer_label")
        
        self.nlayerspinBox = QtWidgets.QSpinBox(self)
        self.nlayerspinBox.setGeometry(QtCore.QRect(110, 180, 241, 31))
        self.nlayerspinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.nlayerspinBox.setMaximum(1000)
        self.nlayerspinBox.setProperty("value", 20)
        self.nlayerspinBox.setObjectName("nlayerspinBox")
        
        # Max iterations.
        self.maxit_label = QtWidgets.QLabel(self)
        self.maxit_label.setGeometry(QtCore.QRect(10, 230, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.maxit_label.setFont(font)
        self.maxit_label.setObjectName("maxit_label")
        
        self.maxitspinBox = QtWidgets.QSpinBox(self)
        self.maxitspinBox.setGeometry(QtCore.QRect(110, 230, 241, 31))
        self.maxitspinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.maxitspinBox.setMaximum(1000)
        self.maxitspinBox.setProperty("value", 10)
        self.maxitspinBox.setObjectName("maxitspinBox")
        
        # Mode choice.
        self.mode_label = QtWidgets.QLabel(self)
        self.mode_label.setGeometry(QtCore.QRect(50, 330, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.mode_label.setFont(font)
        self.mode_label.setObjectName("mode_label")
        
        self.modespinBox = QtWidgets.QSpinBox(self)
        self.modespinBox.setGeometry(QtCore.QRect(110, 330, 241, 31))
        self.modespinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.modespinBox.setMinimum(1)
        self.modespinBox.setMaximum(5)
        self.modespinBox.setProperty("value", 3)
        self.modespinBox.setObjectName("modespinBox")
        
        # tolerance.
        self.tol_label = QtWidgets.QLabel(self)
        self.tol_label.setGeometry(QtCore.QRect(30, 280, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.tol_label.setFont(font)
        self.tol_label.setObjectName("tol_label")
        
        self.toldoubleSpinBox = QtWidgets.QDoubleSpinBox(self)
        self.toldoubleSpinBox.setGeometry(QtCore.QRect(110, 280, 241, 31))
        self.toldoubleSpinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.toldoubleSpinBox.setSingleStep(0.1)
        self.toldoubleSpinBox.setProperty("value", 1.2)
        self.toldoubleSpinBox.setObjectName("toldoubleSpinBox")
        
        # Noise.
        self.noise_label = QtWidgets.QLabel(self)
        self.noise_label.setGeometry(QtCore.QRect(50, 380, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.noise_label.setFont(font)
        self.noise_label.setObjectName("noise_label")
        
        self.noisespinBox = QtWidgets.QSpinBox(self)
        self.noisespinBox.setGeometry(QtCore.QRect(110, 380, 241, 31))
        self.noisespinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.noisespinBox.setMinimum(0)
        self.noisespinBox.setMaximum(100)
        self.noisespinBox.setProperty("value", 6)
        self.noisespinBox.setObjectName("noisespinBox")
        
        # Plot type.
        self.plottype_label = QtWidgets.QLabel(self)
        self.plottype_label.setGeometry(QtCore.QRect(30, 430, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.plottype_label.setFont(font)
        self.plottype_label.setObjectName("plottype_label")
        
        self.comboBox = QtWidgets.QComboBox(self)
        self.comboBox.setGeometry(QtCore.QRect(110, 430, 231, 31))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        
        # Output file path.
        self.output_label = QtWidgets.QLabel(self)
        self.output_label.setGeometry(QtCore.QRect(10, 480, 100, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.output_label.setFont(font)
        self.output_label.setObjectName("output_label")
        
        self.textEdit_output = QtWidgets.QTextEdit(self)
        self.textEdit_output.setGeometry(QtCore.QRect(110, 480, 221, 31))
        self.textEdit_output.setObjectName("textEdit_output")
        
        self.outputButton = QtWidgets.QToolButton(self)
        self.outputButton.setGeometry(QtCore.QRect(340, 480, 21, 31))
        self.outputButton.setObjectName("outputButton")
        
        # progress Bar.
        self.progressBar = QtWidgets.QProgressBar(self)
        self.progressBar.setGeometry(QtCore.QRect(50, 520, 301, 21))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        
        # Apply and reset Button.
        self.buttonBox = QtWidgets.QDialogButtonBox(self)
        self.buttonBox.setGeometry(QtCore.QRect(120, 550, 164, 32))
        self.buttonBox.setStandardButtons(self.buttonBox.Apply|self.buttonBox.Reset)
        self.buttonBox.setObjectName("buttonBox")
        self.buttonBox.button(self.buttonBox.Apply).setDefault(True)
        
        # retranslateUi
        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
        
        # init
        os.chdir(os.path.split(os.path.abspath(sys.argv[0]))[0])
        self.parainit()
        
        # Button
        self.inputButton.clicked.connect(self.open_file)
        self.outputButton.clicked.connect(self.output_file)
        self.buttonBox.button(self.buttonBox.Apply).clicked.connect(self.Apply)
        self.buttonBox.button(self.buttonBox.Reset).clicked.connect(self.Reset)
        
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Dialog", "Occam1d Inversion"))
        self.label.setText(_translate("Dialog", "Occam1D Inversion"))
        self.edifile_label.setText(_translate("Dialog", "edi file"))
        self.nlayer_label.setText(_translate("Dialog", "Layer nums"))
        self.maxit_label.setText(_translate("Dialog", "Max iterations"))
        self.mode_label.setText(_translate("Dialog", "Mode"))
        self.tol_label.setText(_translate("Dialog", "Tolerance"))
        self.noise_label.setText(_translate("Dialog", "Noise"))
        self.plottype_label.setText(_translate("Dialog", "Plot Type"))
        self.inputButton.setText(_translate("Dialog", "..."))
        self.comboBox.setItemText(0, _translate("Dialog", "gnuplot"))
        self.outputButton.setText(_translate("Dialog", "..."))
        self.output_label.setText(_translate("Dialog", "Output Path"))
        
    def parainit(self):
        self.fileName = ""
        self.nlayers = 20
        self.maxit = 10
        self.mode = 3
        self.tol = 1.2
        self.noise = 6
        self.plottype = "gnuplot"
        self.outpath = './result/'
        self.textEdit_input.setText("")
        self.nlayerspinBox.setProperty("value", 20)
        self.maxitspinBox.setProperty("value", 10)
        self.modespinBox.setProperty("value", 3)
        self.toldoubleSpinBox.setProperty("value", 1.2)
        self.noisespinBox.setProperty("value", 6)
        self.progressBar.reset()
        self.textEdit_output.setText("")
        
    def paraget(self):
        self.nlayers = self.nlayerspinBox.text()
        self.maxit = self.maxitspinBox.text()
        self.mode = self.modespinBox.text()
        self.tol = self.toldoubleSpinBox.text()
        self.noise = self.noisespinBox.text()
        
    def open_file(self):
        self.progressBar.reset()
        self.fileName,fileType = QtWidgets.QFileDialog.getOpenFileNames(
            self, "选取文件", os.getcwd(), "EDI Files(*.edi);;All Files(*)")
        
        if fileType != "EDI Files(*.edi)":
            QMessageBox.information(self, "提醒", "暂不支持除EDI之外的文件\n请重新选择!", QMessageBox.Yes, QMessageBox.Yes)
            return 0
        
        if type(self.fileName) == list:
            QMessageBox.information(self, "提醒", "导入%d个文件成功!"%len(self.fileName), QMessageBox.Yes, QMessageBox.Yes)
            self.textEdit_input.setText(self.fileName[0])
            self.type = 1
            return 1
        else:
            pass
    
    def output_file(self):
        self.outpath = QtWidgets.QFileDialog.getExistingDirectory(None, "选取文件夹", "C:/")
        self.textEdit_output.setText(self.outpath)
      
    def Apply(self):
        # Main process part.
        if self.fileName == "":
            QMessageBox.information(self, "提醒", "请先读入文件哦!",
                                    QMessageBox.Yes, QMessageBox.Yes)
        else:
            self.paraget()
            global resultdir
            resultdir = time.strftime('%Y-%m-%d-%H-%M-%S', time.localtime(time.time()))
            os.system('mkdir ./result/%s'%resultdir)
            count = 0
            if self.type == 1:
                filenums = len(self.fileName)
                for file in self.fileName:
                    occresult = occam1d(
                        file,
                        nlayers = self.nlayers, 
                        maxit = self.maxit, mode = self.mode,
                        tol = self.tol, noise = self.noise)
                    count += 1
                    self.progressBar.setValue(int(count / filenums * 100))
                QMessageBox.information(
                    self, "提醒", "成功完成任务!", 
                    QMessageBox.Yes, QMessageBox.Yes
                    )
                os.system('mv ./result/%s %s'%(resultdir, self.outpath))
            return
        
    def Reset(self):
        self.parainit()
    
    
def occam1d(
    file, nlayers = 20, maxit = 10, mode = 3,
    tol = 1.2, noise = 6
    ):
    pathandname = os.path.split(file)
    edifile = pathandname[1]

    sitename = edifile.replace('.edi','')
    
    # code
    print(os.getcwd())
    os.system('cp %s ./lib/edi/%s'%(file, edifile))
    f = open('./lib/png.list','w')
    f.write('png=\\\n%s.png \\\n'%sitename)
    f.close()
    
    # mkpara
    os.system('mkdir ./lib/%s'%sitename)
    f = open('./lib/%s/mk.para'%sitename, 'w')
    f = open('./lib/%s/mk.para'%sitename, 'a+')
    f.write('site=%s\n'%sitename)
    f.write('inv=%s.RECV\n'%sitename)
    f.write('nlayer=%s\n'%nlayers)
    f.write('mfile=%s.mod\n'%sitename)
    f.write('dfile=%s.dat\n'%sitename)
    f.write('maxit=%s\n'%maxit)
    f.write('tol=%s\n'%tol)
    f.write('mode=%s\n'%mode)
    f.write('noise=%s\n'%noise)
    f.close()
    
    #cd to sitename and make
    os.chdir(os.getcwd()+'/lib')
    print(os.getcwd())
    os.system('make')
    os.system('rm edi/*.edi')
    os.system('mv %s ../result/%s/'%(sitename, resultdir))
    os.chdir('..')
    return

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    uimainwindow = Ui_OCCAM1D()
    uimainwindow.show()
    sys.exit(app.exec_())
